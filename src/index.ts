import { app, BrowserWindow, session, ipcMain, dialog } from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const isDevelopment = process.env.NODE_ENV !== "production";

let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  // Set up CSP
  session.defaultSession.webRequest.onHeadersReceived(
    (
      details: Electron.OnHeadersReceivedListenerDetails,
      callback: (response: Electron.HeadersReceivedResponse) => void,
    ) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            // Allow loading resources from app origin and dev server
            "default-src 'self' http://localhost:3000;",
            // In dev, we need unsafe-eval for webpack hot reload
            `script-src 'self' 'unsafe-inline' ${isDevelopment ? "'unsafe-eval'" : ""};`,
            // Allow styles from webpack dev server
            "style-src 'self' 'unsafe-inline' http://localhost:3000;",
            // Fonts from our app only
            "font-src 'self';",
            // Images from our app and API
            "img-src 'self' http://localhost:8000 data:;",
            // Connect to our API and WebSocket for dev
            "connect-src 'self' http://localhost:8000 ws://localhost:3000 http://localhost:3000;",
            // Restrict object-src
            "object-src 'none';",
            // Form submissions
            "form-action 'self';",
            // Base URL restriction
            "base-uri 'self';",
            // Frame restrictions
            "frame-ancestors 'none';",
          ].join(" "),
        },
      });
    },
  );

  // Create the browser window with secure defaults
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: false, // Disable node integration
      contextIsolation: true, // Enable context isolation
      webSecurity: true, // Ensure web security is enabled
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Handle dialog open
ipcMain.handle("dialog:openDirectory", async (event, options) => {
  const mainWindow = BrowserWindow.getAllWindows()[0];
  if (!mainWindow) return { canceled: true, filePaths: [] };
  const result = await dialog.showOpenDialog(mainWindow, options);
  return result;
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
