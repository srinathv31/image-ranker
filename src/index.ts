import { app, BrowserWindow, session, ipcMain, dialog } from "electron";
import { startApiProcess } from "./lib/api-process";
import log from "electron-log";
import path from "path";
import fs from "fs";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  log.info("Electron squirrel startup detected, quitting the app.");
  app.quit();
}

const isDevelopment = process.env.NODE_ENV !== "production";

let mainWindow: BrowserWindow | null = null;

const createWindow = async (): Promise<void> => {
  // Set up CSP
  session.defaultSession.webRequest.onHeadersReceived(
    (
      details: Electron.OnHeadersReceivedListenerDetails,
      callback: (response: Electron.HeadersReceivedResponse) => void,
    ) => {
      log.info("Setting up Content Security Policy.");
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            // Allow loading resources from app origin and dev server
            "default-src 'self' http://localhost:3000;",
            // In dev, we need unsafe-eval for webpack hot reload
            `script-src 'self' 'unsafe-inline' ${isDevelopment ? "'unsafe-eval'" : ""};`,
            // Allow styles from webpack dev server
            "style-src 'self' 'unsafe-inline' http://localhost:3000;",
            // Fonts from our app only
            "font-src 'self';",
            // Images from our app and API
            "img-src 'self' http://localhost:8000 data:;",
            // Connect to our API and WebSocket for dev
            "connect-src 'self' http://localhost:8000 ws://localhost:3000 http://localhost:3000;",
            // Restrict object-src
            "object-src 'none';",
            // Form submissions
            "form-action 'self';",
            // Base URL restriction
            "base-uri 'self';",
            // Frame restrictions
            "frame-ancestors 'none';",
          ].join(" "),
        },
      });
    },
  );

  // Create the browser window with secure defaults
  log.info("Creating the main browser window.");
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    // show: false, // Don't show the window until API is ready
  });

  // Load the app
  log.info("Loading the app URL.");
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  try {
    log.info("Starting API process");
    // Start the API process
    await startApiProcess();

    // Once API is ready, show the window
    log.info("API process started successfully, showing the main window.");
    mainWindow.show();

    // Notify renderer that API is ready
    mainWindow.webContents.send("api:ready");
  } catch (error) {
    log.error("Failed to start API:", error);
    dialog.showErrorBox(
      "API Error",
      "Failed to start the Image Ranker API. The application will now close.",
    );
    app.quit();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  log.info("All windows closed. Quitting the app.");
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    log.info("Re-creating the main window.");
    createWindow();
  }
});

// Handle dialog open
ipcMain.handle("dialog:openDirectory", async (event, options) => {
  const mainWindow = BrowserWindow.getAllWindows()[0];
  if (!mainWindow) {
    log.warn("No main window found for dialog open.");
    return { canceled: true, filePaths: [] };
  }
  log.info("Opening directory dialog.");
  const result = await dialog.showOpenDialog(mainWindow, options);
  return result;
});

// Handle image downloads
ipcMain.handle(
  "download:images",
  async (event, images: { base64_image: string; filename: string }[]) => {
    try {
      const downloadsPath = app.getPath("downloads");
      const downloadFolder = path.join(downloadsPath, "image-ranker-downloads");

      // Create downloads folder if it doesn't exist
      await fs.promises.mkdir(downloadFolder, { recursive: true });

      // Download all images in parallel
      await Promise.all(
        images.map(async (image) => {
          const buffer = Buffer.from(image.base64_image, "base64");
          const sanitizedFilename = path.basename(image.filename);
          const filePath = path.join(downloadFolder, sanitizedFilename);
          await fs.promises.writeFile(filePath, buffer);
        }),
      );

      return { success: true, downloadFolder };
    } catch (error) {
      log.error("Error downloading images:", error);
      return { success: false, error: (error as Error).message };
    }
  },
);

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
